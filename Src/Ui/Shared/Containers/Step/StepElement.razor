@if (IsVisible)
{
    <div class="mb-2">
        <Card>
            <div id="@($"Step{StepNumber}")">
                <div>
                    <span class="step-title">@t[Title]</span>
                    @ChildContent
                </div>
            </div>
        </Card>

        <footer class="d-flex justify-content-center gap-4 mt-4">
            @if (CanDisplayPreviousButton)
            {
                <Button Color=Color.Light @onclick=Previous>@t["step.previous"]</Button>
            }
            @if (CanDisplayNextButton)
            {
                <Button NoSubmit @onclick="Next">@t[NextLabel]</Button>
            }
        </footer>
    </div>
}

@code {

    [CascadingParameter]
    private StepContainer Container { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public byte Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? ValidationRuleSet { get; set; }

    [Parameter]
    public string? IconId { get; set; }

    [Parameter]
    public string? NextLabel { get; set; } = "step.next";

    public bool IsActive { get; set; } = false;

    public bool IsInvalid { get; set; } = false;

    public bool IsValidated { get; set; } = false;

    [Parameter]
    public bool EnableNavigationButton { get; set; } = true;

    public bool IsVisible => IsActive || IsValidated;

    public void SetActive() => this.IsActive = true;

    public void SetInactive() => this.IsActive = false;

    public int StepNumber => Container.FindIndex(this) + 1;

    public bool CanDisplayPreviousButton => Container.IsFirstStep(this) == false && this.IsActive;

    public bool CanDisplayNextButton => Container.IsLastStep(this) == false && this.IsActive && this.EnableNavigationButton;

    public void Next() => Container.Next(this);

    public void Previous() => Container.Previous(this);

    protected override void OnInitialized()
    {
        if (Container == null)
        {
            throw new Exception();
        }

        Container.AddStep(this);

        base.OnInitialized();
    }
}