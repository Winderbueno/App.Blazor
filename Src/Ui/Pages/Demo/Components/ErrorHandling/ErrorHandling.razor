@* Error Handling in Blazor
    https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/handle-errors?view=aspnetcore-7.0 *@
<Card Title="Error Handling">
    <Container FlexColumn>

        @* Global Handling goes through 3 levels :
            - Global Try/Catch. Add ErrorHandler? as CascadingParameter and call ErrorHandler!.ProcessError(e) in 
            - Global ErrorBoundary
            - Last resort, if none of previous mecanism as been triggered, blazor display a default*@
        <Card Title="Global Handling" Level=2>
            <div>On counter :</div>
            <div>- Hit 1. Global Try/Catch</div>
            <div>- Hit 2. Global ErrorBoundary</div>
            <p><b>Current count.</b> @count</p>
            <Button @onclick=IncrementCount>+ 1</Button>
        </Card>

        @* Specific handling with ErrorBoundary (For dedicated display on error)
            https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/handle-errors?view=aspnetcore-7.0#error-boundaries
            This error handling method allows to handle an Error State for the component tree in <ChildContent>
                > Error state is activated when the component tree raises an unhandled exception
                > During error state, the <ErrorContent> specified Ui replace the component tree
                > It is possible to recover from the error state
             
             Note. "ErrorBoundary" can be overriden to add a particular behaviour
                https://github.com/dotnet/aspnetcore/blob/9ace45d8dffb0c89026df3cd989b49f87c61344c/src/Components/test/testassets/BasicTestApp/ErrorBoundaryTest/CustomErrorBoundary.razor"*@
        <Card Title="Error Boundary" Level=2>
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    <ErrorButton/>
                </ChildContent>
                <ErrorContent>
                    <div style="color:var(--k-color-danger)">Content displayed if</div>
                    <p style="color:var(--k-color-danger)">@("<ErrorButton>") is in error state</p>
                    <Button @onclick=Recover>Recover</Button>
                </ErrorContent>
            </ErrorBoundary>
        </Card>
    </Container>
</Card>

@code {
    [CascadingParameter]
    public ErrorHandler? ErrorHandler { get; set; }

    private ErrorBoundary? errorBoundary;
    private int count = 0;

    private void Recover() => errorBoundary?.Recover();

    private void IncrementCount()
    {
        count++;

        if (count == 1)
        {
            try
            {
                Log.Information("Incremented count to {CurrentCount}", count);
                throw new NotSupportedException("Too many clicks!");
            }
            catch (Exception e) { ErrorHandler!.ProcessError(e); }
        } 
        else
            throw new NotSupportedException("Too many clicks!");
    }
}