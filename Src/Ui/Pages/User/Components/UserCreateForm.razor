@using Application.Models.User;
@using Domain.Enums.User;
@using Domain.Exceptions;

@inject IUserService userService
@inject NavigationManager navigation
@inject ToasterService toaster

<Card>
    <Form Model=form
          OnValidSubmit=ValidSubmit>

        <h3>@t["user.profile"]</h3>

        <SelectField @bind-Value=form.Type
                     Label=@t["common.type"]
                     Options=types
                     Placeholder=@(t["common.type"] + "...") />

        <SelectField @bind-Value=form.Function
                     Label=@t["common.function"]
                     Options=functions
                     Placeholder=@(t["common.function"] + "...") />

        <TextField @bind-Value=form.Username Label=@t["user.username"] />

        <h3>@t["person.identity"]</h3>

        <TextField @bind-Value=form.FirstName Label=@t["person.firstname"] />
        <TextField @bind-Value=form.LastName Label=@t["person.lastname"] />

        <TextField @bind-Value=form.Email Label=@t["person.mail"] />
        <TextField @bind-Value=form.EmailConfirm Label=@t["person.mail-confirm"] DisablePaste />
        
        <TextField @bind-Value=form.PhoneNumber Label=@t["person.phone"] />
        <TextField @bind-Value=form.PhoneNumberConfirm Label=@t["person.phone-confirm"] DisablePaste />

        <Button>@t["action.submit"]</Button>
    </Form>
</Card>

@code {
    private UserCreateAppDto form = new();
    private UserAppDto? userCreated = null;

    private IEnumerable<Option>? functions, types;

    protected override void OnInitialized()
    {
        functions = Enum.GetValues<UserFunction>().ToOption<UserFunction>();
        types = Enum.GetValues<UserType>().ToOption<UserType>();
    }
    
    private async Task ValidSubmit()
    {
        try
        {
            userCreated = await userService.CreateAsync(form);

            if (userCreated != null)
            {
                toaster.AddSuccess(t["event.created"]);
                navigation.NavigateTo("users");
            }
        } // Todo. Centralise error handling -> Error component ?
        catch (ProblemDetailsException e)
        {
            Log.Error(e.ToString());
            toaster.AddError(e.Message);
        }
    }
}