@using Presentation.Pages.User.Components

@page "/users"
@page "/users/search"
@attribute [Authorize]

<Container FlexColumn NoWrap Mobile>

    <Container FlexJustify="center" 
               Mobile MobileAlign="center">
        <UserSearchForm Form=form OnFormChange=OnFormChange />
    </Container>

    @if (userIds != null)
    {
        <InfiniteScroller @ref="infiniteScroller" OnLoad=OnLoad>
            <Container Grid PaddingInline=Size.Largest
                       GridColumns="repeat(auto-fit, minmax(20rem, 1fr))"
                       Mobile>
                @foreach (int userId in userIds)
                {
                    <UserCard UserId=userId OnUserDelete=OnUserDelete />
                }
            </Container>
        </InfiniteScroller>
    }

    <Actions>
        <Tooltip Text=@t["action.create"]>
            <Link Route="users/create"><Button Square Icon="plus" /></Link>
        </Tooltip>
    </Actions>
</Container>

@code {
    private UserSearchFormDto form = new();
    private IEnumerable<int>? userIds = null;
    private InfiniteScroller? infiniteScroller;

    protected override async Task OnInitializedAsync()
    {
        form.PageNumber = 1;
        userIds = await SearchAsync();
    }

    // This is necessary for the infinite scroller _module not to be null on first load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) userIds = await SearchAsync();
    }

    private async void OnFormChange(UserSearchFormDto form)
    {
        await infiniteScroller!.ActivateLoad();
        this.form = form;
        this.form.PageNumber = 1;
        userIds = await SearchAsync();
        StateHasChanged();
    }

    private void OnUserDelete(int id)
    {
        userIds = userIds is not null ? userIds.Where(x => x != id) : userIds;
        StateHasChanged();
    }

    private async Task OnLoad()
    {
        form.PageNumber++;
        IEnumerable<int> pageIds = await SearchAsync();
        if (pageIds.Any()) this.userIds = this.userIds!.Concat(pageIds).ToList();

        // Search ended
        if (pageIds.Count() < form.PageSize) infiniteScroller!.DeactivateLoad();
    }

    private async Task<IEnumerable<int>> SearchAsync()
    {
        form.PageSize = 8;

        var userIds = new List<int>();
        try { userIds = (await userService.SearchAsync(form)).ToList(); } 
        catch (ProblemDetailsException) { }

        return userIds;
    }
}