@using Application.Models.User
@using Domain.Enums.User
@using Presentation.Pages.User.Components

@page "/users"
@attribute [Authorize("user.read")]
@inject IUserService userService

<Container FlexColumn NoWrap>

    <Container FlexJustify="space-between"
               FlexAlign="center">
        <h1>@t["user.feature.search"]</h1>
        <Link Button
               Icon="plus"
               Route="users/create">@t["action.create"]</Link>
     </Container>

     <Card>
         <UserSearchForm Form=form OnFormChange=OnFormChange />

         @if (userIds != null)
        {
            <InfiniteScroller OnLoad=OnLoad>
                <Container Grid PaddingInline=Size.Largest
                            GridColumns="repeat(auto-fit, minmax(20rem, 1fr))"
                            MobileChildWidth="20rem">
                     @foreach (int userId in userIds)
                    {
                        <UserCard UserId=userId></UserCard>
                    }
                </Container>
            </InfiniteScroller>
        }
    </Card>

</Container>

@code {
    [CascadingParameter]
    public ErrorHandler? ErrorHandler { get; set; }

    private UserSearchAppDto form = new();
    private IEnumerable<int>? userIds = null;
    private bool endReached = false;

    protected override async Task OnInitializedAsync()
    {
        form.PageNumber = 1;
        //userIds = await SearchAsync();
    }

    // This is necessary for the infinite scroller _module not to be null on first load
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender) userIds = await SearchAsync();
    }

    private async void OnFormChange(UserSearchAppDto form)
    {
        endReached = false;
        this.form = form;
        this.form.PageNumber = 1;
        //userIds = await SearchAsync();
        StateHasChanged();
    }

    private async Task OnLoad()
    {
        if (!endReached)
        {
            form.PageNumber++;
            IEnumerable<int> pageIds = await SearchAsync();
            if (pageIds.Any()) this.userIds = this.userIds!.Concat(pageIds).ToList();

            // Check if endReached
            if (pageIds.Count() < form.PageSize) endReached = true;
        }
    }

    private async Task<IEnumerable<int>> SearchAsync()
    {
        form.PageSize = 10;

        try { await userService.SearchAsync(form); }
        catch (Exception e) { ErrorHandler!.ProcessError(e); }

        return new List<int> { 1 }; // Todo. Replace par real call
    }
}