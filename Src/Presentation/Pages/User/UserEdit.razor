@using AutoMapper;
@using Application.Models.User;
@using Domain.Enums.User;
@using Domain.Exceptions;

@page "/users/edit/{userId}"
@attribute [Authorize]
@inject IUserService userService
@inject IMapper mapper
@inject NavigationManager navigation

<h1>@t["user.feature.edit"]</h1>
        
<Container FlexJustify="center">
    <Card>
        <Form Model=form
              OnValidSubmit=OnValidSubmit>

            <h3>@t["user.profile"]</h3>

            <div><b>@t["user.username"]:</b> @user?.Username</div>

            <SelectField @bind-Value=form.Type
                         Disabled
                         Label=@t["common.type"]
                         Options=@(Enum.GetValues<UserType>()) 
                         Placeholder=@(t["common.type"] + "...") />

            <SelectField @bind-Value=form.Function
                         Required
                         Label=@t["common.function"]
                         Options=@(Enum.GetValues<UserFunction>())
                         Placeholder=@(t["common.function"] + "...") />

            <Button>@t["action.submit"]</Button>
        </Form>
    </Card>
</Container>

@code {
    [CascadingParameter]
    public ErrorHandler? ErrorHandler { get; set; }

    [Parameter] 
    public string? UserId { get; set; }

    private UserUpdateAppDto form = new();
    private UserAppDto user = new();

    protected override async Task OnInitializedAsync()
    {        
        // Retrieve user info
        user = await userService.GetAsync(int.Parse(UserId!));
        form = mapper.Map<UserUpdateAppDto>(user);
    }

    private async void OnValidSubmit()
    {
        try
        {
            user = await userService.UpdateAsync(form);

            if (user != null)
            {
                toaster.AddSuccess(t["event.edited"]);
                navigation.NavigateTo("users");
            }
        }
        catch (Exception e) { ErrorHandler!.ProcessError(e); }
    }
}