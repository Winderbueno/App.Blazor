@using Application.Models.User;
@using Domain.Enums.User;

@inject IUserService userService

<Form Model=Form
      OnFieldChanged=OnFieldChanged>
    <Container FlexAlign="center"
               FlexJustify="center"
               NoRowGap>
        <TextField @bind-Value=Form.Contains
                   BindOnInput
                    OnInputDelayed=FormChanged
                    Label=@t["action.search"]
                    Placeholder=@Placeholder("action.search") />

         <SelectField @bind-Value=Form.Status
                      Multiple
                      Label=@t["common.status"]
                      Options=@(Enum.GetValues<UserStatus>())
                      Placeholder=@Placeholder("common.status") />

         <SelectField @bind-Value=Form.Types
                      Multiple
                      Label=@t["common.type"]
                      Options=@(Enum.GetValues<UserType>())
                      Placeholder=@Placeholder("common.type") />

         <SelectField @bind-Value=Form.Functions
                      Multiple
                      Label=@t["common.function"]
                      Options=@(Enum.GetValues<UserFunction>())
                      Placeholder=@Placeholder("common.function") />

         <Button @onclick=Clear>@t["action.clear"]</Button>
     </Container>
 </Form>

 @code {
    [Parameter]
    public Action<UserSearchAppDto>? OnFormChange { get; set; }

    [Parameter]
    public UserSearchAppDto Form { get; set; } = new();

    private string Placeholder(string? label) => t[label] + "...";

    private void Clear()
    {
        Form = new();
        FormChanged();
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs? e)
        => FormChanged();

    private void FormChanged(object? state = null)
        => OnFormChange?.Invoke(Form);
}