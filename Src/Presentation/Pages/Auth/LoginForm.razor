@using Presentation.Middlewares.Authentication

@inject AuthStateProvider auth

<Card Title="@t["auth.sign-in"]">
    <Form Model=form OnValidSubmit=SignIn>
        <TextField @bind-Value=form.Username
                   Label=@t["user.username"]
                   Placeholder="patate@mail.com" />

        <TextField @bind-Value=form.Password
                   Label=@t["user.password"] />

        <Button>@t["auth.sign-in"]</Button>
    </Form>

    <Card Title="User">
        <AuthorizeView>
            <Authorized>
                @t["home.hello"] @context.User.Identity!.Name !
            </Authorized>
            <NotAuthorized>
                Not connected
            </NotAuthorized>
        </AuthorizeView>
    </Card>
</Card>

@code {
    private LoginDto form = new();

    private async Task SignIn() => await auth.SignInAsync(form.Username, form.Password);

    public class LoginDto
    {
        public string Username { get; set; } = "kevin.gellenoncourt@gmail.com";
        public string Password { get; set; } = "patate";
    }

    public class LoginDtoValidator : AbstractValidator<LoginDto>
    {
        public LoginDtoValidator()
        {
            RuleFor(x => x.Username).NotEmpty().EmailAddress();
            RuleFor(x => x.Password).NotEmpty();
        }
    }
}