@*https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/handle-errors?view=aspnetcore-7.0
  Error Handling solution can use different mecanism
    - Try/Catch. [Not used, except for Api Business Error Exception muting]
    - Blazor <ErrorBoundary> (Handle an error state) [Used only for global handling]
        https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/handle-errors?view=aspnetcore-7.0#error-boundaries
        - Trigger. A component under <ChildContent> throws an unhandled exception.
        - Handling. ErrorState is activated + Rerender display with '<ChildContent> replaced by <ErrorContent>'
        - Recover. ErrorState can be recovered if implemented
        Note. <ErrorBoundary> can be overriden to add a particular behaviour OnError on OnRender
        https://github.com/dotnet/aspnetcore/blob/9ace45d8dffb0c89026df3cd989b49f87c61344c/src/Components/test/testassets/BasicTestApp/ErrorBoundaryTest/CustomErrorBoundary.razor"
    - Dedicated solution for 'ApiBusinessErrors'. [Used | Not showcased]
        Trigger. An api response has an HttpCode.(400 or 404)
        Handling. Fire toast with ProblemDetails message + Throw ProblemDetailsException
        Implem. ProblemDetailsHandler.cs (+ If needed, Try/Catch to avoid triggering global ErrorBoundary)
    - Blazor Default ErrorBar. [Not showcased | run the app with an undeclared injected service to see it in action]
        Trigger. If no other mecanism has triggered
        Handling. Yellow bar on bottom (See.error-handling.css)*@
<Card Title="Error Handling">
    <Container FlexColumn>

        @*Try/Catch (For specific treatment)*@
        <Card Title="Try/Catch" Level=2>
            <div>Log & trigger toast</div>
            <Button @onclick=TryCatch>Click</Button>
        </Card>

        @*https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/handle-errors?view=aspnetcore-7.0#error-boundaries*@
        <Card Title="ErrorBoundary" Level=2>
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    <div>Display @("<ErrorContent>")</div>
                    <ErrorButton/>
                </ChildContent>
                <ErrorContent Context="e">
                    <p style ="color:var(--k-color-danger)">
                        <div>@("<ErrorContent>")</div>
                        <div>@e.Message</div>
                    </p>
                    <Button @onclick=Recover>Recover</Button>
                </ErrorContent>
            </ErrorBoundary>
        </Card>

        @*https://jonathancrozier.com/blog/implementing-blazor-error-boundaries
        The app uses <ErrorBoundary> to implement a global error handling mecanism
            Trigger. A component under <ChildContent> throws an unhandled exception.
            Handling. ErrorState is activated + Rerender with <ErrorBoundary>'default <ErrorContent> (.blazor-error-boundary)
            Implem. <ErrorBoundary> surrounding Body in MainLayout.razor + Recover on SetParam*@
        <Card Title="Global Handling" Level=2>
            <div>Display global error</div>
            <Button @onclick=GlobalHandling>Click</Button>
        </Card>
    </Container>
</Card>

@code {
    private ErrorBoundary? errorBoundary;
    private void Recover() => errorBoundary?.Recover();

    private void GlobalHandling()
        => throw new NotSupportedException("Too many clicks!");

    private void TryCatch()
    {
        try { throw new ApplicationException(); }
        catch (Exception) {
            // This could be any other specific treatment
            Log.Information("Local Try/Catch Log");
            toaster.AddError("Local Try/Catch Toast"); 
        }
    }
}