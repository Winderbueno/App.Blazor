@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Presentation.Pages.Auth.Components

@inject IJSRuntime JS
@inject INavMenuService navState

<aside class=@(!mobHideItems ? "round-top" : null)
       style=@($"--mob-translate-Y:{(navState.Display ? "101%" : "0")};")>
    <header>
        <Link>
            <svg class="logo">
                <use xlink:href="../_content/K.Blazor/svg/logo.svg#blazor" />
            </svg>
        </Link>

        @ChildContent

        <Button Icon=@(mobHideItems ? "menu" : "x") CssClass="hide-large" @onclick=toggleItems />
    </header>

    <nav class=@(mobHideItems ? "hide-mob" : "round-top") @onclick=hideItems>
        
        <Container FlexColumn Mobile>
            @ChildContent
        </Container>

        <AuthMenu />
    </nav>
</aside>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    // [Parameter]
    // public bool MobileHide { get; set; } = false;

    // ElementReference has to be provided as a function
    // See. https://blazor-university.com/javascript-interop/calling-javascript-from-dotnet/passing-html-element-references/
    [Parameter]
    public Func<ElementReference>? MobileScrollHide { get; set; }

    [Parameter]
    public Action? MobileOnShow { get; set; }

    [Parameter]
    public Action? MobileOnHide { get; set; }

    private bool mobHideItems = true;

    private void toggleItems() => mobHideItems = !mobHideItems;
    private void hideItems() => mobHideItems = true;

    protected override void OnInitialized()
    {
        navState.OnDisplayChange += StateHasChanged;
        navState.OnShow += OnShow;
        navState.OnHide += OnHide;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Activate scroll detection (every 500 ms)
        if (MobileScrollHide != null)
        {
            if (firstRender)
                await JS.InvokeVoidAsync("onScroll", MobileScrollHide(), 500);
        }
    }

    private void OnShow()
    {
        MobileOnShow?.Invoke();
        //animated = true;
        hideItems();
    }

    private void OnHide() => MobileOnHide?.Invoke();
}