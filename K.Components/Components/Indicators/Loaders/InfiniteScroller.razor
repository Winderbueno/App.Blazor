@inject IJSRuntime JSRuntime

@ChildContent

@if (bottomLoader)
{
    <div class="center">
        <Spinner />
    </div>
}

<div @ref="_lastItemIndicator" style="height:1px;flex-shrink:0"></div> @*HTML Element that triggers the infinite loading*@

@*To operate, this component requires the Js script "./scripts/infinite-scroller.js"*@
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Func<Task>? OnLoad { get; set; }

    private bool bottomLoader = false;
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfiniteScroller>? _currentComponentReference;
    private IJSObjectReference? _module;
    private IJSObjectReference? _instance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/K.Blazor/scripts/infinite-scroller.js");
            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    @*This method is called by "infinite-scroller.js"*@
    [JSInvokable]
    public async Task LoadMore()
    {
        bottomLoader = true;
        StateHasChanged(); // display the loading indicator

        await InvokeAsync(OnLoad!);
        await _instance!.InvokeVoidAsync("onNewItems");

        bottomLoader = false;
        StateHasChanged(); // display new items and remove the loading indicator
    }
}