@inject IJSRuntime JS

@ChildContent

@if (loader)
{
    <div class="center">
        <Spinner />
    </div>
}

@*Element that triggers the infinite loading*@
<div @ref=_lastItemIndicator 
    hidden=@(!load) 
    style="height:1px;flex-shrink:0" />

@*To operate, this component requires the Js script "./scripts/infinite-scroller.js"*@
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [EditorRequired, Parameter]
    public Func<Task>? OnLoad { get; set; }

    private bool load = true, loader = false;
    private ElementReference _lastItemIndicator;
    private IJSObjectReference? _module, _instance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/K.Blazor/scripts/infinite-scroller.js");
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, DotNetObjectReference.Create(this));
        }
    }

    @*This method is called by "infinite-scroller.js"*@
    [JSInvokable]
    public async Task LoadMore()
    {
        if (load)
        {
            // Show loader
            loader = true;
            StateHasChanged(); 

            await InvokeAsync(OnLoad!);
            await _instance!.InvokeVoidAsync("onNewItems");

            // Hide loader and show new items
            loader = false;
            StateHasChanged();
        }
    }

    public void DeactivateLoad() => load = false;
    public async Task ActivateLoad()
    {
        load = true;
        await _instance!.InvokeVoidAsync("onNewItems");
    }
}