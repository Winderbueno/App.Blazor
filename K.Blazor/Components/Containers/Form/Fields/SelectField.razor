@using K.Blazor.Components.Containers.Form.Abstract
@using K.Blazor.Components.Containers.Form.Style
@using K.Blazor.Components.Indicators
@using System.Linq.Expressions

@typeparam TValue
@typeparam TOption
@inherits Abstract.SelectField<TValue, TOption>

<!-- Lorsque https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/togglePopover sera standardisé : à morderniser -->

<div class="field-wrapper">

    <label>@Label</label>

    @if (Multiple)
    {
        <SelectFieldStyle>
            <div tabindex="0" class="select-wrapper"
                @onfocusin="_ => optionsVisible = true"
                @onfocusout="_ => optionsVisible = false">
                <!-- Field -->
                <div class="select-field @(invalid ? "invalid" : "") @(optionsVisible ? "focused" : "")">
                    @if (selectedOptions.Any())
                    {
                        <span class="selected-options">
                            @for (int i = 0; i < selectedOptions.Count(); i++)
                            {
                                @($"{selectedOptions[i].Name}" + (i + 1 == selectedOptions.Count() ? "" : $", "))
                            }
                        </span>
                    }
                    else
                    {
                        <span class="placeholder-color">@Placeholder</span>
                    }
                    <Icon Id=@(optionsVisible ? "chevron-top" : "chevron-bottom") />
                </div>

                <!-- Options -->
                <ul class="options @(optionsVisible ? "" : "hide")">
                    @foreach (var pair in multipleOptions)
                    {
                        <li @onclick="_ => OnValueChange(pair.Option)">
                            <input type="checkbox" checked=@pair.Checked>
                            <data value=@pair.Option.Value>@pair.Option.Name</data>
                        </li>
                    }
                </ul>
            </div>
        </SelectFieldStyle>
    }
    else
    {
        <InputSelect class="form-control"
                 style="@(Placeholder != null ? "--selected-option-color:" + selectedOptionColor : "")"
                 disabled=@Disabled
                 @oninput=OnInput
                 @onblur=OnBlur
                 Value=Value
                 ValueChanged=ValueChanged
                 ValueExpression=ValueExpression>
            @if (Placeholder != null)
            {
                @*Trick to use null option value as a placeholder*@
                <option value="" selected disabled hidden>@Placeholder</option>
            }
            @if (options != null)
            {
                foreach (var opt in options)
                {
                    <option value="@opt.Value">@opt.Name</option>
                }
            }            
        </InputSelect>
    }

    <ValidationMessage For=ValueExpression></ValidationMessage>
</div>

@code {
    [Parameter]
    public bool Multiple { get; set; } = false;

    /* Single Select */
    private string selectedOptionColor => Value == null ? "var(--k-color-grey)" : "var(--k-color-primary);";

    /* Multiple Select */
    protected override bool RequiredValueUnset => multipleOptions.All(x => x.Checked == false);
    private List<(Option Option, bool Checked)> multipleOptions = new();
    private List<Option> selectedOptions => multipleOptions.Where(x => x.Checked == true).Select(x => x.Option).ToList();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(Multiple) ResetCheckBox();
    }

    protected override void OnParametersSet()
    {
        if (Multiple) {
            ValueExpression = (() => Value);
            if (Value == null) ResetCheckBox();
        }
    }

    private async void OnValueChange(Option opt)
    {
        multipleOptions = multipleOptions
            .Select(x => x.Option.Value != opt.Value ? x : new(x.Option, !x.Checked))
            .OrderBy(x => !x.Checked).ThenBy(x => x.Option.Name)
            .ToList();

        // Notification events
        var values = selectedOptions.Select(x => x.Value).ToList();
        await ValueChanged.InvokeAsync((TValue)(object)values);
        EditContext!.NotifyFieldChanged(EditContext.Field(ParseFieldName()));

        // Validation
        ValidateField();
    }

    private void ResetCheckBox()
    {
        if (options != null)
            multipleOptions = options
                .OrderBy(x => x.Name)
                .Select(x => (x, false)).ToList();
    }
}